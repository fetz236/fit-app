{"version":3,"sources":["functions.ts"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","createPaymentMethod","params","options","NativeStripeSdk","paymentMethod","error","createToken","type","country","toLowerCase","routingNumber","MissingRoutingNumber","token","retrievePaymentIntent","clientSecret","paymentIntent","retrieveSetupIntent","setupIntent","confirmPayment","paymentIntentClientSecret","isApplePaySupported","isiOS","presentApplePay","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","errorAddressFields","confirmApplePayPayment","handleNextAction","confirmSetupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","verifyMicrodepositsForPayment","verifyMicrodeposits","verifyMicrodepositsForSetup","initPaymentSheet","paymentOption","presentPaymentSheet","confirmPaymentSheetPayment","isGooglePaySupported","isAndroid","initGooglePay","presentGooglePay","createGooglePayPaymentMethod","openApplePaySetup","collectBankAccountForPayment","collectBankAccount","collectBankAccountForSetup","collectBankAccountToken","session","collectFinancialConnectionsAccounts","canAddCardToWallet","canAddCard","details","isCardInWallet","isInWallet","Constants","getConstants"],"mappings":"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","sourcesContent":["import { isAndroid, isiOS, createError } from './helpers';\nimport { MissingRoutingNumber } from './types/Errors';\nimport NativeStripeSdk from './NativeStripeSdk';\nimport {\n  ApplePay,\n  ApplePayError,\n  ApplePayResult,\n  ConfirmPaymentResult,\n  ConfirmPaymentSheetPaymentResult,\n  SetupIntent,\n  PaymentIntent,\n  ConfirmSetupIntentResult,\n  CreatePaymentMethodResult,\n  CreateTokenForCVCUpdateResult,\n  CreateTokenResult,\n  GooglePayInitResult,\n  HandleNextActionResult,\n  InitPaymentSheetResult,\n  PaymentMethod,\n  PaymentSheet,\n  PayWithGooglePayResult,\n  PresentPaymentSheetResult,\n  RetrievePaymentIntentResult,\n  RetrieveSetupIntentResult,\n  StripeError,\n  GooglePay,\n  CreateGooglePayPaymentMethodResult,\n  OpenApplePaySetupResult,\n  Token,\n  VerifyMicrodepositsParams,\n  VerifyMicrodepositsForPaymentResult,\n  VerifyMicrodepositsForSetupResult,\n  CollectBankAccountForPaymentResult,\n  CollectBankAccountForSetupResult,\n  IsCardInWalletResult,\n  CanAddCardToWalletParams,\n  CanAddCardToWalletResult,\n  FinancialConnections,\n} from './types';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\nexport const createPaymentMethod = async (\n  params: PaymentMethod.CreateParams,\n  options: PaymentMethod.CreateOptions = {}\n): Promise<CreatePaymentMethodResult> => {\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.createPaymentMethod(\n      params,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createToken = async (\n  params: Token.CreateParams\n): Promise<CreateTokenResult> => {\n  if (\n    params.type === 'BankAccount' &&\n    params.country?.toLowerCase() === 'us' &&\n    !params.routingNumber\n  ) {\n    return {\n      error: MissingRoutingNumber,\n    };\n  }\n\n  try {\n    const { token, error } = await NativeStripeSdk.createToken(params);\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      token: token!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const retrievePaymentIntent = async (\n  clientSecret: string\n): Promise<RetrievePaymentIntentResult> => {\n  try {\n    const { paymentIntent, error } =\n      await NativeStripeSdk.retrievePaymentIntent(clientSecret);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const retrieveSetupIntent = async (\n  clientSecret: string\n): Promise<RetrieveSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.retrieveSetupIntent(\n      clientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\n/**\n * Confirm and, if necessary, authenticate a PaymentIntent.\n *\n * @param paymentIntentClientSecret The client_secret of the associated [PaymentIntent](https://stripe.com/docs/api/payment_intents).\n * @param params An optional object that contains data related to the payment method used to confirm this payment. If no object is provided (undefined), then it is assumed that the payment method has already been [attached  to the Payment Intent](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method).\n * @param options An optional object that contains options for this payment method.\n * @returns A promise that resolves to an object containing either a `paymentIntent` field, or an `error` field.\n */\nexport const confirmPayment = async (\n  paymentIntentClientSecret: string,\n  params?: PaymentIntent.ConfirmParams,\n  options: PaymentIntent.ConfirmOptions = {}\n): Promise<ConfirmPaymentResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.confirmPayment(\n      paymentIntentClientSecret,\n      params,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const isApplePaySupported = async (): Promise<boolean> => {\n  return isiOS && (await NativeStripeSdk.isApplePaySupported());\n};\n\nexport const presentApplePay = async (\n  params: ApplePay.PresentParams\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    const { paymentMethod, error } = await NativeStripeSdk.presentApplePay(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return { paymentMethod: paymentMethod! };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const updateApplePaySummaryItems = async (\n  summaryItems: ApplePay.CartSummaryItem[],\n  errorAddressFields: Array<{\n    field: ApplePay.AddressFields;\n    message?: string;\n  }> = []\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    await NativeStripeSdk.updateApplePaySummaryItems(\n      summaryItems,\n      errorAddressFields\n    );\n\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const confirmApplePayPayment = async (\n  clientSecret: string\n): Promise<{ error?: StripeError<ApplePayError> }> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n  try {\n    await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const handleNextAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleNextActionResult> => {\n  try {\n    const { paymentIntent, error } = await NativeStripeSdk.handleNextAction(\n      paymentIntentClientSecret\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmSetupIntent = async (\n  paymentIntentClientSecret: string,\n  params: SetupIntent.ConfirmParams,\n  options: SetupIntent.ConfirmOptions = {}\n): Promise<ConfirmSetupIntentResult> => {\n  try {\n    const { setupIntent, error } = await NativeStripeSdk.confirmSetupIntent(\n      paymentIntentClientSecret,\n      params,\n      options\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createTokenForCVCUpdate = async (\n  cvc: string\n): Promise<CreateTokenForCVCUpdateResult> => {\n  try {\n    const { tokenId, error } = await NativeStripeSdk.createTokenForCVCUpdate(\n      cvc\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      tokenId: tokenId!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const handleURLCallback = async (url: string): Promise<boolean> => {\n  const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n  return stripeHandled;\n};\n\nexport const verifyMicrodepositsForPayment = async (\n  clientSecret: string,\n  params: VerifyMicrodepositsParams\n): Promise<VerifyMicrodepositsForPaymentResult> => {\n  try {\n    const { paymentIntent, error } = (await NativeStripeSdk.verifyMicrodeposits(\n      true,\n      clientSecret,\n      params\n    )) as VerifyMicrodepositsForPaymentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const verifyMicrodepositsForSetup = async (\n  clientSecret: string,\n  params: VerifyMicrodepositsParams\n): Promise<VerifyMicrodepositsForSetupResult> => {\n  try {\n    const { setupIntent, error } = (await NativeStripeSdk.verifyMicrodeposits(\n      false,\n      clientSecret,\n      params\n    )) as VerifyMicrodepositsForSetupResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const initPaymentSheet = async (\n  params: PaymentSheet.SetupParams\n): Promise<InitPaymentSheetResult> => {\n  try {\n    const { paymentOption, error } = await NativeStripeSdk.initPaymentSheet(\n      params\n    );\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentOption,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const presentPaymentSheet =\n  async (): Promise<PresentPaymentSheetResult> => {\n    try {\n      const { paymentOption, error } =\n        await NativeStripeSdk.presentPaymentSheet();\n      if (error) {\n        return {\n          error,\n        };\n      }\n      return {\n        paymentOption: paymentOption!,\n      };\n    } catch (error: any) {\n      return {\n        error,\n      };\n    }\n  };\n\nexport const confirmPaymentSheetPayment =\n  async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n    try {\n      const { error } = await NativeStripeSdk.confirmPaymentSheetPayment();\n      if (error) {\n        return {\n          error,\n        };\n      }\n      return {};\n    } catch (error: any) {\n      return {\n        error,\n      };\n    }\n  };\n\nexport const isGooglePaySupported = async (\n  params?: GooglePay.IsSupportedParams\n): Promise<boolean> => {\n  return (\n    isAndroid && (await NativeStripeSdk.isGooglePaySupported(params ?? {}))\n  );\n};\n\nexport const initGooglePay = async (\n  params: GooglePay.InitParams\n): Promise<GooglePayInitResult> => {\n  try {\n    const { error } = await NativeStripeSdk.initGooglePay(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const presentGooglePay = async (\n  params: GooglePay.PresentParams\n): Promise<PayWithGooglePayResult> => {\n  try {\n    const { error } = await NativeStripeSdk.presentGooglePay(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const createGooglePayPaymentMethod = async (\n  params: GooglePay.CreatePaymentMethodParams\n): Promise<CreateGooglePayPaymentMethodResult> => {\n  try {\n    const { error, paymentMethod } =\n      await NativeStripeSdk.createGooglePayPaymentMethod(params);\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentMethod: paymentMethod!,\n    };\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const openApplePaySetup = async (): Promise<OpenApplePaySetupResult> => {\n  try {\n    const { error } = await NativeStripeSdk.openApplePaySetup();\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {};\n  } catch (error: any) {\n    return {\n      error,\n    };\n  }\n};\n\nexport const collectBankAccountForPayment = async (\n  clientSecret: string,\n  params: PaymentMethod.CollectBankAccountParams\n): Promise<CollectBankAccountForPaymentResult> => {\n  try {\n    const { paymentIntent, error } = (await NativeStripeSdk.collectBankAccount(\n      true,\n      clientSecret,\n      params\n    )) as CollectBankAccountForPaymentResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      paymentIntent: paymentIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const collectBankAccountForSetup = async (\n  clientSecret: string,\n  params: PaymentMethod.CollectBankAccountParams\n): Promise<CollectBankAccountForSetupResult> => {\n  try {\n    const { setupIntent, error } = (await NativeStripeSdk.collectBankAccount(\n      false,\n      clientSecret,\n      params\n    )) as CollectBankAccountForSetupResult;\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      setupIntent: setupIntent!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\n/**\n * Use collectBankAccountToken in the [Add a Financial Connections Account to a US Custom Connect](https://stripe.com/docs/financial-connections/connect-payouts) account flow.\n * When called, it will load the Authentication Flow, an on-page modal UI which allows your user to securely link their external financial account for payouts.\n * @param clientSecret The client_secret of the [Financial Connections Session](https://stripe.com/docs/api/financial_connections/session).\n * @returns A promise that resolves to an object containing either `session` and `token` fields, or an error field.\n */\nexport const collectBankAccountToken = async (\n  clientSecret: string\n): Promise<FinancialConnections.TokenResult> => {\n  try {\n    const { session, token, error } =\n      await NativeStripeSdk.collectBankAccountToken(clientSecret);\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      session: session!,\n      token: token!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\n/**\n * Use collectFinancialConnectionsAccounts in the [Collect an account to build data-powered products](https://stripe.com/docs/financial-connections/other-data-powered-products) flow.\n * When called, it will load the Authentication Flow, an on-page modal UI which allows your user to securely link their external financial account.\n * @param clientSecret The client_secret of the [Financial Connections Session](https://stripe.com/docs/api/financial_connections/session).\n * @returns A promise that resolves to an object containing either a `session` field, or an error field.\n */\nexport const collectFinancialConnectionsAccounts = async (\n  clientSecret: string\n): Promise<FinancialConnections.SessionResult> => {\n  try {\n    const { session, error } =\n      await NativeStripeSdk.collectFinancialConnectionsAccounts(clientSecret);\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      session: session!,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const canAddCardToWallet = async (\n  params: CanAddCardToWalletParams\n): Promise<CanAddCardToWalletResult> => {\n  try {\n    const { canAddCard, details, error } =\n      await NativeStripeSdk.canAddCardToWallet(params);\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      canAddCard: canAddCard as boolean,\n      details: details,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const isCardInWallet = async (params: {\n  cardLastFour: string;\n}): Promise<IsCardInWalletResult> => {\n  try {\n    const { isInWallet, token, error } = await NativeStripeSdk.isCardInWallet(\n      params\n    );\n\n    if (error) {\n      return {\n        error,\n      };\n    }\n    return {\n      isInWallet: isInWallet as boolean,\n      token: token,\n    };\n  } catch (error: any) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const Constants = NativeStripeSdk.getConstants();\n"]}